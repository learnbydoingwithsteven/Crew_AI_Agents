"""Academic Citation Management example using CrewAI with Ollama."""

import sys
import os
import json
from typing import Dict, Any, Optional

# Add the parent directory to sys.path to allow importing from projects
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..', '..')))

from crewai import Agent, Task, Crew, Process
from projects.utils import UseCase

class AcademicCitationManagementUseCase(UseCase):
    """Academic Citation Management use case implementation."""
    
    def setup_agents(self):
        """Set up agents for academic citation management."""
        self.reference_librarian = Agent(
            role="Academic Reference Librarian",
            goal="Organize and validate academic references",
            backstory="You are an experienced academic librarian specialized in scholarly references. "
                     "You excel at organizing, validating, and ensuring the completeness and accuracy of "
                     "academic citations. You have deep knowledge of different citation styles including "
                     "APA, MLA, Chicago, IEEE, and various journal-specific formats.",
            allow_delegation=False,
            llm=self.llm,
            tools=self.tools,
            verbose=True
        )
        
        self.citation_analyst = Agent(
            role="Citation Pattern Analyst",
            goal="Analyze citation patterns and recommend strategic citations",
            backstory="You are a citation analysis expert who specializes in understanding citation "
                     "networks and patterns within academic disciplines. You can identify seminal works, "
                     "emerging trends, and strategic citation opportunities that enhance the impact and "
                     "positioning of academic papers. You understand how citation choices affect a paper's reception.",
            allow_delegation=False,
            llm=self.llm,
            tools=self.tools,
            verbose=True
        )
        
        self.bibliography_specialist = Agent(
            role="Bibliography Management Specialist",
            goal="Create properly formatted bibliographies and citation management systems",
            backstory="You are a specialist in bibliography management tools and techniques. You help "
                      "researchers organize, format, and maintain their reference collections efficiently. "
                      "You understand various citation software solutions, their integration with word processors, "
                      "and best practices for maintaining reference databases throughout research projects.",
            allow_delegation=False,
            llm=self.llm,
            tools=self.tools,
            verbose=True
        )
        
        # Add agents to the list
        self.agents = [self.reference_librarian, self.citation_analyst, self.bibliography_specialist]
    
    def setup_tasks(self, input_data: Optional[Dict[str, Any]] = None):
        """Set up tasks for academic citation management.
        
        Args:
            input_data: Optional dictionary containing input data
        """
        # Process input data if provided
        research_topic = input_data.get("query", "Machine learning applications in climate science") if input_data else "Machine learning applications in climate science"
        citation_style = input_data.get("citation_style", "APA") if input_data else "APA"
        
        # Prepare references context if provided
        references_context = ""
        if input_data and "references" in input_data:
            references_context = f"Use the following references for analysis: {json.dumps(input_data['references'])}"
        
        # Define tasks
        reference_organization_task = Task(
            description=f"Organize and validate academic references for research on '{research_topic}'. {references_context}\n"
                       f"Review the provided references, ensuring each citation is complete with all required metadata "
                       f"(authors, year, title, journal/publisher, DOI, etc.). Identify any missing or inconsistent "
                       f"information. Organize references by category (e.g., primary research, reviews, methodological, "
                       f"theoretical) and recency. Flag any potentially problematic references.",
            expected_output=f"A comprehensive organization of references with validation notes and categorization.",
            agent=self.reference_librarian,
        )
        
        citation_analysis_task = Task(
            description=f"Analyze citation patterns for research on '{research_topic}' and recommend strategic citations. "
                       f"Based on the organized references, analyze the citation landscape for this research area. "
                       f"Identify seminal works that should be cited, emerging trends that show where the field is heading, "
                       f"and any citation gaps in the current reference list. Recommend additional strategic citations "
                       f"that would strengthen the academic positioning of the research.",
            expected_output="A citation analysis report with strategic recommendations for strengthening the reference list.",
            agent=self.citation_analyst,
            context=[reference_organization_task]
        )
        
        bibliography_management_task = Task(
            description=f"Create a properly formatted bibliography in {citation_style} style and recommend a citation management system. "
                      f"Based on the reference validation and citation analysis, format the complete bibliography according "
                      f"to {citation_style} guidelines. Identify any challenging formatting cases and provide appropriate solutions. "
                      f"Recommend a citation management workflow and tools that would be most suitable for ongoing research "
                      f"on this topic, considering factors like collaboration needs, integration with writing software, and "
                      f"discipline-specific requirements.",
            expected_output=f"A formatted bibliography in {citation_style} style and recommendations for citation management tools and workflows.",
            agent=self.bibliography_specialist,
            context=[reference_organization_task, citation_analysis_task]
        )
        
        # Add tasks to the list
        self.tasks = [reference_organization_task, citation_analysis_task, bibliography_management_task]

# Create instance for standalone usage
academic_citation_management = AcademicCitationManagementUseCase()

def run(input_data: Optional[Dict[str, Any]] = None) -> str:
    """Run the academic citation management use case.
    
    Args:
        input_data: Optional dictionary containing input data
        
    Returns:
        The result of the academic citation management process
    """
    # Create a new instance to ensure clean state
    use_case = AcademicCitationManagementUseCase()
    use_case.setup_agents()
    use_case.setup_tasks(input_data)
    use_case.setup_crew(Process.sequential)
    
    # Run the use case
    result = use_case.crew.kickoff()
    return result

if __name__ == "__main__":
    result = run()
    print(result)
