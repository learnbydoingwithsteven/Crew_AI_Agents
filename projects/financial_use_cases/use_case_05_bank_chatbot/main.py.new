"""Bank Customer Service Chatbot example using CrewAI with Ollama."""

import sys
import os
import json
from typing import Dict, Any, Optional

# Add the parent directory to sys.path to allow importing from projects
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..', '..')))

from crewai import Agent, Task, Crew, Process
from projects.utils import UseCase

class BankChatbotUseCase(UseCase):
    """Bank Customer Service Chatbot use case implementation."""
    
    def setup_agents(self):
        """Set up agents for bank customer service chatbot."""
        self.general_support_agent = Agent(
            role="General Banking Support Specialist",
            goal="Provide helpful responses to general banking inquiries",
            backstory="You are a knowledgeable banking customer service specialist with expertise in "
                     "general account information, banking hours, policies, and common procedures. "
                     "You provide friendly, clear assistance for everyday banking questions.",
            allow_delegation=False,
            llm=self.llm,
            tools=self.tools,
            verbose=True
        )
        
        self.financial_advisor = Agent(
            role="Financial Product Advisor",
            goal="Provide detailed information on banking products and services",
            backstory="You are a financial advisor with deep knowledge of all banking products including "
                     "accounts, loans, credit cards, investments, and insurance. You can explain features, "
                     "benefits, eligibility requirements, and help customers choose appropriate products.",
            allow_delegation=False,
            llm=self.llm,
            tools=self.tools,
            verbose=True
        )
        
        self.technical_support = Agent(
            role="Banking Technical Support Specialist",
            goal="Provide solutions for technical banking issues",
            backstory="You are a technical support specialist focused on online banking, mobile apps, "
                     "ATMs, and other banking technology. You troubleshoot issues, explain error messages, "
                     "and guide customers through technical procedures to resolve problems.",
            allow_delegation=False,
            llm=self.llm,
            tools=self.tools,
            verbose=True
        )
        
        # Add agents to the list
        self.agents = [self.general_support_agent, self.financial_advisor, self.technical_support]
    
    def setup_tasks(self, input_data: Optional[Dict[str, Any]] = None):
        """Set up tasks for bank customer service chatbot.
        
        Args:
            input_data: Optional dictionary containing input data
        """
        # Process input data if provided
        customer_query = input_data.get("query", "I'd like to know about your savings account options") if input_data else "I'd like to know about your savings account options"
        
        # Prepare customer context if provided
        customer_context = ""
        if input_data and "customer_info" in input_data:
            customer_context = f"Customer information: {json.dumps(input_data['customer_info'])}"
        
        # Define tasks
        query_categorization = Task(
            description=f"Analyze the following customer query and categorize it as general support, "
                       f"product information, or technical support: '{customer_query}'. {customer_context}\n"
                       f"Determine the customer's intent and identify any specific banking products, "
                       f"services, or issues mentioned. Extract key information that would help in "
                       f"providing an appropriate response.",
            expected_output="A categorization of the query with extracted key information and customer intent.",
            agent=self.general_support_agent,
        )
        
        specialized_response = Task(
            description=f"Based on the query categorization, provide a detailed response to: '{customer_query}'. "
                       f"{customer_context}\nYour response should address the customer's specific needs, "
                       f"provide accurate information about relevant banking products or services, "
                       f"and anticipate follow-up questions. Include specific details like rates, features, "
                       f"or procedural steps as appropriate.",
            expected_output="A detailed, helpful response to the customer's query with specific information.",
            agent=self.financial_advisor,
            context=[query_categorization]
        )
        
        support_resources = Task(
            description=f"For the query: '{customer_query}', provide additional support resources "
                      f"that would help the customer. This may include links to relevant documentation, "
                      f"guidance on using self-service options, contact information for specialized departments, "
                      f"or how to schedule appointments. Also suggest proactive steps the customer "
                      f"might take to prevent future issues.",
            expected_output="A list of helpful resources and proactive suggestions related to the customer's query.",
            agent=self.technical_support,
            context=[query_categorization, specialized_response]
        )
        
        # Add tasks to the list
        self.tasks = [query_categorization, specialized_response, support_resources]

# Create instance for standalone usage
bank_chatbot = BankChatbotUseCase()

def run(input_data: Optional[Dict[str, Any]] = None) -> str:
    """Run the bank chatbot use case.
    
    Args:
        input_data: Optional dictionary containing input data
        
    Returns:
        The result of the bank chatbot process
    """
    # Create a new instance to ensure clean state
    use_case = BankChatbotUseCase()
    use_case.setup_agents()
    use_case.setup_tasks(input_data)
    use_case.setup_crew(Process.sequential)
    
    # Run the use case
    result = use_case.crew.kickoff()
    return result

if __name__ == "__main__":
    result = run()
    print(result)
