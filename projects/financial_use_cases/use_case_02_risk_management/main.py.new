"""Risk Management example using CrewAI with Ollama."""

import sys
import os
import json
from typing import Dict, Any, Optional

# Add the parent directory to sys.path to allow importing from projects
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..', '..')))

from crewai import Agent, Task, Crew, Process
from projects.utils import UseCase

class RiskManagementUseCase(UseCase):
    """Risk Management use case implementation."""
    
    def setup_agents(self):
        """Set up agents for risk management."""
        self.risk_analyst = Agent(
            role="Risk Analyst",
            goal="Identify and analyze potential risks in derivative portfolios",
            backstory="You are a senior risk analyst with expertise in derivative markets. "
                      "You can evaluate various risk factors and their potential impact on portfolios.",
            allow_delegation=False,
            llm=self.llm,
            tools=self.tools,
            verbose=True
        )
        
        self.portfolio_manager = Agent(
            role="Portfolio Manager",
            goal="Optimize portfolio composition to balance risk and return",
            backstory="You are a seasoned portfolio manager who understands how to structure investments "
                      "to achieve optimal risk-adjusted returns. You create strategies to hedge against risks.",
            allow_delegation=False,
            llm=self.llm,
            tools=self.tools,
            verbose=True
        )
        
        self.stress_tester = Agent(
            role="Stress Test Engineer",
            goal="Design and implement stress tests to evaluate portfolio resilience",
            backstory="You specialize in creating scenarios to test how portfolios perform under extreme conditions. "
                      "Your models help identify vulnerabilities that might not be apparent under normal conditions.",
            allow_delegation=False,
            llm=self.llm,
            tools=self.tools,
            verbose=True
        )
        
        # Add agents to the list
        self.agents = [self.risk_analyst, self.portfolio_manager, self.stress_tester]
    
    def setup_tasks(self, input_data: Optional[Dict[str, Any]] = None):
        """Set up tasks for risk management.
        
        Args:
            input_data: Optional dictionary containing input data
        """
        # Process input data if provided
        query = input_data.get("query", "Analyze risk in a standard derivative portfolio") if input_data else "Analyze risk in a standard derivative portfolio"
        
        # Prepare portfolio data if provided
        portfolio_context = ""
        if input_data and "portfolio" in input_data:
            portfolio_context = f"Use this portfolio data for analysis: {json.dumps(input_data['portfolio'])}"
        
        # Define tasks
        risk_analysis_task = Task(
            description=f"{query} {portfolio_context}\nIdentify market, credit, liquidity, and operational risks. "
                       f"Quantify potential losses using appropriate risk metrics (VaR, Expected Shortfall, etc.).",
            expected_output="A comprehensive risk analysis report with quantified risk metrics and clear categorization of risks.",
            agent=self.risk_analyst,
        )
        
        portfolio_strategy_task = Task(
            description="Based on the risk analysis, develop a portfolio management strategy "
                       "that optimizes risk-adjusted returns. Include specific hedging recommendations.",
            expected_output="A portfolio management strategy with specific recommendations for position adjustments and hedging tactics.",
            agent=self.portfolio_manager,
            context=[risk_analysis_task]
        )
        
        stress_test_task = Task(
            description="Create and run stress tests based on the identified risks and portfolio strategy. "
                       "Include scenarios for market crashes, liquidity crises, and counterparty defaults.",
            expected_output="A stress test report showing portfolio performance under various adverse scenarios with recommendations for improving resilience.",
            agent=self.stress_tester,
            context=[risk_analysis_task, portfolio_strategy_task]
        )
        
        # Add tasks to the list
        self.tasks = [risk_analysis_task, portfolio_strategy_task, stress_test_task]

# Create instance for standalone usage
risk_management = RiskManagementUseCase()

def run(input_data: Optional[Dict[str, Any]] = None) -> str:
    """Run the risk management use case.
    
    Args:
        input_data: Optional dictionary containing input data
        
    Returns:
        The result of the risk management analysis
    """
    # Create a new instance to ensure clean state
    use_case = RiskManagementUseCase()
    use_case.setup_agents()
    use_case.setup_tasks(input_data)
    use_case.setup_crew(Process.sequential)
    
    # Run the use case
    result = use_case.crew.kickoff()
    return result

if __name__ == "__main__":
    result = run()
    print(result)
