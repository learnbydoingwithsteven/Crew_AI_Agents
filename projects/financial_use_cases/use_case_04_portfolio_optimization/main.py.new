"""Portfolio Optimization example using CrewAI with Ollama."""

import sys
import os
import json
from typing import Dict, Any, Optional

# Add the parent directory to sys.path to allow importing from projects
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..', '..')))

from crewai import Agent, Task, Crew, Process
from projects.utils import UseCase

class PortfolioOptimizationUseCase(UseCase):
    """Portfolio Optimization use case implementation."""
    
    def setup_agents(self):
        """Set up agents for portfolio optimization."""
        self.market_analyst = Agent(
            role="Market Analyst",
            goal="Analyze market trends and asset performance",
            backstory="You are a market analyst with expertise in evaluating different asset classes and market conditions. "
                     "You can identify trends, correlations, and predict potential market movements based on "
                     "economic indicators and historical data.",
            allow_delegation=False,
            llm=self.llm,
            tools=self.tools,
            verbose=True
        )
        
        self.portfolio_optimizer = Agent(
            role="Portfolio Optimizer",
            goal="Design optimal portfolio allocations based on risk-return profiles",
            backstory="You are a quantitative analyst specialized in portfolio theory. You can determine "
                     "efficient portfolio allocations using techniques like Modern Portfolio Theory, "
                     "Black-Litterman model, and factor models to achieve optimal risk-adjusted returns.",
            allow_delegation=False,
            llm=self.llm,
            tools=self.tools,
            verbose=True
        )
        
        self.investment_advisor = Agent(
            role="Investment Advisor",
            goal="Provide actionable investment recommendations for portfolio rebalancing",
            backstory="You are an experienced investment advisor who translates complex portfolio analysis "
                     "into practical investment recommendations. You consider client objectives, risk tolerance, "
                     "tax implications, and practical constraints when suggesting portfolio changes.",
            allow_delegation=False,
            llm=self.llm,
            tools=self.tools,
            verbose=True
        )
        
        # Add agents to the list
        self.agents = [self.market_analyst, self.portfolio_optimizer, self.investment_advisor]
    
    def setup_tasks(self, input_data: Optional[Dict[str, Any]] = None):
        """Set up tasks for portfolio optimization.
        
        Args:
            input_data: Optional dictionary containing input data
        """
        # Process input data if provided
        investment_goal = input_data.get("query", "Optimize a diversified portfolio for long-term growth with moderate risk") if input_data else "Optimize a diversified portfolio for long-term growth with moderate risk"
        
        # Prepare portfolio data if provided
        portfolio_context = ""
        if input_data and "portfolio" in input_data:
            portfolio_context = f"Use this portfolio data for analysis: {json.dumps(input_data['portfolio'])}"
        
        # Define tasks
        market_analysis_task = Task(
            description=f"Analyze current market conditions relevant to the goal: '{investment_goal}'. {portfolio_context}\n"
                       f"Evaluate different asset classes including stocks, bonds, alternatives, and cash equivalents. "
                       f"Identify market trends, correlations between asset classes, and economic factors that may "
                       f"impact investment performance. Provide a forward-looking market outlook.",
            expected_output="A comprehensive market analysis report with outlook for different asset classes and relevant economic factors.",
            agent=self.market_analyst,
        )
        
        portfolio_optimization_task = Task(
            description=f"Develop an optimized portfolio allocation based on the investment goal: '{investment_goal}' "
                       f"and the market analysis. Apply portfolio optimization techniques to determine the efficient "
                       f"frontier and optimal asset allocation. Include expected returns, volatility, Sharpe ratio, "
                       f"and other relevant metrics. Consider diversification benefits and risk factors.",
            expected_output="A detailed portfolio optimization analysis with specific asset allocation recommendations and expected performance metrics.",
            agent=self.portfolio_optimizer,
            context=[market_analysis_task]
        )
        
        investment_recommendation_task = Task(
            description=f"Create actionable investment recommendations based on the optimized portfolio allocation. "
                       f"Translate the technical optimization results into specific investment actions, including "
                       f"which assets to buy, sell, or hold. Consider practical aspects such as transaction costs, "
                       f"tax implications, and implementation strategy. Provide a clear implementation roadmap.",
            expected_output="Practical investment recommendations with specific actions and an implementation timeline.",
            agent=self.investment_advisor,
            context=[market_analysis_task, portfolio_optimization_task]
        )
        
        # Add tasks to the list
        self.tasks = [market_analysis_task, portfolio_optimization_task, investment_recommendation_task]

# Create instance for standalone usage
portfolio_optimization = PortfolioOptimizationUseCase()

def run(input_data: Optional[Dict[str, Any]] = None) -> str:
    """Run the portfolio optimization use case.
    
    Args:
        input_data: Optional dictionary containing input data
        
    Returns:
        The result of the portfolio optimization process
    """
    # Create a new instance to ensure clean state
    use_case = PortfolioOptimizationUseCase()
    use_case.setup_agents()
    use_case.setup_tasks(input_data)
    use_case.setup_crew(Process.sequential)
    
    # Run the use case
    result = use_case.crew.kickoff()
    return result

if __name__ == "__main__":
    result = run()
    print(result)
