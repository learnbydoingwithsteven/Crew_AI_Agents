"""Data Analysis example using CrewAI with Ollama."""

import sys
import os
import json
from typing import Dict, Any, Optional

# Add the parent directory to sys.path to allow importing from projects
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..', '..')))

from crewai import Agent, Task, Crew, Process
from projects.utils import UseCase

class DataAnalysisUseCase(UseCase):
    """Data Analysis use case implementation."""
    
    def setup_agents(self):
        """Set up agents for data analysis."""
        self.data_engineer = Agent(
            role="Data Engineer",
            goal="Prepare and preprocess data for analysis",
            backstory="You are an expert data engineer who specializes in data cleaning, transformation, "
                      "and preparation. You ensure data is in the right format and structure for analysis, "
                      "handling issues like missing values, outliers, and data normalization.",
            allow_delegation=False,
            llm=self.llm,
            tools=self.tools,
            verbose=True
        )
        
        self.data_scientist = Agent(
            role="Data Scientist",
            goal="Apply appropriate statistical and machine learning techniques to analyze data",
            backstory="You are a skilled data scientist with expertise in statistical analysis and machine learning. "
                     "You can select and apply the right analytical methods to extract insights from data, "
                     "including regression, classification, clustering, and dimension reduction techniques.",
            allow_delegation=False,
            llm=self.llm,
            tools=self.tools,
            verbose=True
        )
        
        self.data_visualizer = Agent(
            role="Data Visualization Expert",
            goal="Create informative and compelling visualizations of data and results",
            backstory="You are a data visualization specialist who can transform analytical results into "
                      "clear and impactful visual representations. You know how to choose the right chart types, "
                      "color schemes, and layouts to effectively communicate data insights.",
            allow_delegation=False,
            llm=self.llm,
            tools=self.tools,
            verbose=True
        )
        
        # Add agents to the list
        self.agents = [self.data_engineer, self.data_scientist, self.data_visualizer]
    
    def setup_tasks(self, input_data: Optional[Dict[str, Any]] = None):
        """Set up tasks for data analysis.
        
        Args:
            input_data: Optional dictionary containing input data
        """
        # Process input data if provided
        analysis_query = input_data.get("query", "Analyze customer purchase patterns and identify market segments") if input_data else "Analyze customer purchase patterns and identify market segments"
        
        # Prepare dataset context if provided
        dataset_context = ""
        if input_data and "dataset" in input_data:
            dataset_context = f"Use this dataset for analysis: {json.dumps(input_data['dataset'])}"
        
        # Define tasks
        data_preparation_task = Task(
            description=f"Prepare the dataset for analysis related to '{analysis_query}'. {dataset_context}\n"
                       f"Clean the data by handling missing values, outliers, and inconsistencies. "
                       f"Perform necessary transformations like normalization, encoding categorical variables, "
                       f"and feature engineering. Provide a summary of the preprocessing steps and the resulting dataset.",
            expected_output="A report on data preprocessing steps performed, with summary statistics of the prepared dataset.",
            agent=self.data_engineer,
        )
        
        data_analysis_task = Task(
            description=f"Analyze the prepared dataset to address '{analysis_query}'. "
                       f"Select and apply appropriate analytical methods, which may include statistical tests, "
                       f"regression analysis, clustering, classification, or other techniques as needed. "
                       f"Document your methodological choices and present the key findings from your analysis.",
            expected_output="A comprehensive analysis report with methodology justification and key findings.",
            agent=self.data_scientist,
            context=[data_preparation_task]
        )
        
        visualization_task = Task(
            description=f"Create effective visualizations to communicate the results of the data analysis for '{analysis_query}'. "
                       f"Design appropriate charts, graphs, or dashboards that highlight key patterns, trends, and insights. "
                       f"For each visualization, provide a clear caption explaining what the visualization shows and its significance.",
            expected_output="A set of data visualizations with explanatory captions that effectively communicate the analysis findings.",
            agent=self.data_visualizer,
            context=[data_preparation_task, data_analysis_task]
        )
        
        # Add tasks to the list
        self.tasks = [data_preparation_task, data_analysis_task, visualization_task]

# Create instance for standalone usage
data_analysis = DataAnalysisUseCase()

def run(input_data: Optional[Dict[str, Any]] = None) -> str:
    """Run the data analysis use case.
    
    Args:
        input_data: Optional dictionary containing input data
        
    Returns:
        The result of the data analysis process
    """
    # Create a new instance to ensure clean state
    use_case = DataAnalysisUseCase()
    use_case.setup_agents()
    use_case.setup_tasks(input_data)
    use_case.setup_crew(Process.sequential)
    
    # Run the use case
    result = use_case.crew.kickoff()
    return result

if __name__ == "__main__":
    result = run()
    print(result)
