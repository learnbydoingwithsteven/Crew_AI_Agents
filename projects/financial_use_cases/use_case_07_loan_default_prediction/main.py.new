"""Loan Default Prediction example using CrewAI with Ollama."""

import sys
import os
import json
from typing import Dict, Any, Optional

# Add the parent directory to sys.path to allow importing from projects
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..', '..')))

from crewai import Agent, Task, Crew, Process
from projects.utils import UseCase

class LoanDefaultPredictionUseCase(UseCase):
    """Loan Default Prediction use case implementation."""
    
    def setup_agents(self):
        """Set up agents for loan default prediction."""
        self.data_scientist = Agent(
            role="Credit Data Scientist",
            goal="Analyze loan data and build predictive models",
            backstory="You are an experienced data scientist specializing in credit risk modeling. "
                     "You have expertise in analyzing lending data, identifying risk factors, and "
                     "building predictive models that can accurately forecast the likelihood of loan defaults. "
                     "You understand various modeling approaches and their application to credit risk.",
            allow_delegation=False,
            llm=self.llm,
            tools=self.tools,
            verbose=True
        )
        
        self.credit_analyst = Agent(
            role="Credit Risk Analyst",
            goal="Assess credit risks based on borrower profiles and market conditions",
            backstory="You are a credit risk analyst with extensive experience in evaluating loan applications "
                     "and assessing default risk. You understand the key factors that contribute to loan defaults, "
                     "including borrower characteristics, loan terms, and economic conditions. You can interpret "
                     "credit scores and financial statements to gauge creditworthiness.",
            allow_delegation=False,
            llm=self.llm,
            tools=self.tools,
            verbose=True
        )
        
        self.implementation_specialist = Agent(
            role="Credit Model Implementation Specialist",
            goal="Translate predictions into actionable lending strategies",
            backstory="You are a specialist in implementing credit risk models in practical lending operations. "
                      "You understand how to convert model predictions into actionable strategies for loan officers "
                      "and credit committees. You can design risk-based pricing, loan term adjustments, and "
                      "intervention strategies based on default predictions.",
            allow_delegation=False,
            llm=self.llm,
            tools=self.tools,
            verbose=True
        )
        
        # Add agents to the list
        self.agents = [self.data_scientist, self.credit_analyst, self.implementation_specialist]
    
    def setup_tasks(self, input_data: Optional[Dict[str, Any]] = None):
        """Set up tasks for loan default prediction.
        
        Args:
            input_data: Optional dictionary containing input data
        """
        # Process input data if provided
        loan_analysis_focus = input_data.get("query", "Small business loan default risk factors during economic downturns") if input_data else "Small business loan default risk factors during economic downturns"
        
        # Prepare loan data if provided
        loan_data_context = ""
        if input_data and "loan_data" in input_data:
            loan_data_context = f"Use the following loan data for analysis: {json.dumps(input_data['loan_data'])}"
        
        # Define tasks
        data_analysis_task = Task(
            description=f"Analyze loan data to identify default risk factors related to '{loan_analysis_focus}'. "
                       f"{loan_data_context}\nPerform exploratory data analysis to identify patterns and correlations "
                       f"in loan performance. Identify key variables that are predictive of loan defaults. Apply "
                       f"statistical techniques to quantify the relationship between various factors and default probability.",
            expected_output="A detailed data analysis report with identified risk factors and their statistical significance.",
            agent=self.data_scientist,
        )
        
        risk_assessment_task = Task(
            description=f"Develop a comprehensive risk assessment framework for '{loan_analysis_focus}'. "
                       f"Based on the data analysis results, create a structured approach to evaluate default risk "
                       f"for new loan applications. Include both quantitative metrics and qualitative factors in your "
                       f"assessment. Define risk categories and thresholds for different levels of default probability.",
            expected_output="A risk assessment framework with clearly defined risk categories and evaluation criteria.",
            agent=self.credit_analyst,
            context=[data_analysis_task]
        )
        
        implementation_task = Task(
            description=f"Design an implementation strategy for the loan default prediction model focused on '{loan_analysis_focus}'. "
                      f"Develop practical guidelines for using the risk assessment framework in lending decisions. "
                      f"Create specific recommendations for loan terms, monitoring procedures, and intervention strategies "
                      f"based on predicted default risk. Include a plan for model validation and performance monitoring.",
            expected_output="A comprehensive implementation plan with specific lending strategies based on default predictions.",
            agent=self.implementation_specialist,
            context=[data_analysis_task, risk_assessment_task]
        )
        
        # Add tasks to the list
        self.tasks = [data_analysis_task, risk_assessment_task, implementation_task]

# Create instance for standalone usage
loan_default_prediction = LoanDefaultPredictionUseCase()

def run(input_data: Optional[Dict[str, Any]] = None) -> str:
    """Run the loan default prediction use case.
    
    Args:
        input_data: Optional dictionary containing input data
        
    Returns:
        The result of the loan default prediction process
    """
    # Create a new instance to ensure clean state
    use_case = LoanDefaultPredictionUseCase()
    use_case.setup_agents()
    use_case.setup_tasks(input_data)
    use_case.setup_crew(Process.sequential)
    
    # Run the use case
    result = use_case.crew.kickoff()
    return result

if __name__ == "__main__":
    result = run()
    print(result)
