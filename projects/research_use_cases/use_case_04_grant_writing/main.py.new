"""Grant Writing example using CrewAI with Ollama."""

import sys
import os
import json
from typing import Dict, Any, Optional

# Add the parent directory to sys.path to allow importing from projects
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..', '..')))

from crewai import Agent, Task, Crew, Process
from projects.utils import UseCase

class GrantWritingUseCase(UseCase):
    """Grant Writing use case implementation."""
    
    def setup_agents(self):
        """Set up agents for grant writing."""
        self.research_expert = Agent(
            role="Research Expert",
            goal="Develop compelling research ideas and methodologies",
            backstory="You are a seasoned researcher with extensive experience in developing innovative "
                     "research projects. You understand what makes research significant, impactful, and "
                     "worthy of funding. You excel at articulating clear research questions and methodologies.",
            allow_delegation=False,
            llm=self.llm,
            tools=self.tools,
            verbose=True
        )
        
        self.grant_writer = Agent(
            role="Grant Writer",
            goal="Craft persuasive grant proposals that secure funding",
            backstory="You are an expert grant writer who has helped secure millions in research funding. "
                     "You know how to structure proposals, emphasize alignment with funder priorities, "
                     "and articulate impact clearly. You excel at creating compelling narratives that make "
                     "complex research accessible and exciting to grant reviewers.",
            allow_delegation=False,
            llm=self.llm,
            tools=self.tools,
            verbose=True
        )
        
        self.budget_specialist = Agent(
            role="Research Budget Specialist",
            goal="Develop realistic and justifiable budgets for research projects",
            backstory="You are a research administrator with expertise in developing project budgets. "
                      "You understand how to allocate resources effectively, justify expenses, and ensure "
                      "compliance with funding agency requirements and institutional policies.",
            allow_delegation=False,
            llm=self.llm,
            tools=self.tools,
            verbose=True
        )
        
        # Add agents to the list
        self.agents = [self.research_expert, self.grant_writer, self.budget_specialist]
    
    def setup_tasks(self, input_data: Optional[Dict[str, Any]] = None):
        """Set up tasks for grant writing.
        
        Args:
            input_data: Optional dictionary containing input data
        """
        # Process input data if provided
        grant_topic = input_data.get("query", "Developing novel machine learning approaches for climate prediction") if input_data else "Developing novel machine learning approaches for climate prediction"
        
        # Prepare funding agency if provided
        funding_context = ""
        if input_data and "funding_agency" in input_data:
            funding_context = f"Target funding agency: {input_data['funding_agency']}"
        
        # Define tasks
        research_plan_task = Task(
            description=f"Develop a comprehensive research plan for a grant proposal on '{grant_topic}'. {funding_context}\n"
                       f"Include research questions, significance, innovation, methodological approach, preliminary results "
                       f"(if applicable), expected outcomes, and potential impact. Explain why this research deserves funding "
                       f"and how it advances the field.",
            expected_output="A detailed research plan that clearly articulates the research questions, approach, and significance.",
            agent=self.research_expert,
        )
        
        proposal_task = Task(
            description=f"Draft a complete grant proposal based on the research plan for '{grant_topic}'. {funding_context}\n"
                       f"Follow standard grant proposal structure including abstract/summary, introduction, "
                       f"literature review, research design, timeline, expected outcomes, broader impacts, and references. "
                       f"Make the proposal persuasive, clear, and aligned with typical funding agency priorities.",
            expected_output="A complete grant proposal draft with all standard sections.",
            agent=self.grant_writer,
            context=[research_plan_task]
        )
        
        budget_task = Task(
            description=f"Create a detailed budget and budget justification for the research project on '{grant_topic}'.\n"
                       f"Include personnel costs (salaries, benefits), equipment, supplies, travel, participant costs, "
                       f"and indirect costs. Provide clear justification for each budget item, explaining why it is "
                       f"necessary for the successful execution of the research plan.",
            expected_output="A comprehensive budget with line items and detailed justifications for each expense.",
            agent=self.budget_specialist,
            context=[research_plan_task, proposal_task]
        )
        
        # Add tasks to the list
        self.tasks = [research_plan_task, proposal_task, budget_task]

# Create instance for standalone usage
grant_writing = GrantWritingUseCase()

def run(input_data: Optional[Dict[str, Any]] = None) -> str:
    """Run the grant writing use case.
    
    Args:
        input_data: Optional dictionary containing input data
        
    Returns:
        The result of the grant writing process
    """
    # Create a new instance to ensure clean state
    use_case = GrantWritingUseCase()
    use_case.setup_agents()
    use_case.setup_tasks(input_data)
    use_case.setup_crew(Process.sequential)
    
    # Run the use case
    result = use_case.crew.kickoff()
    return result

if __name__ == "__main__":
    result = run()
    print(result)
