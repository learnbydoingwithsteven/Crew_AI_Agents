"""Scientific Visualization example using CrewAI with Ollama."""

import sys
import os
import json
from typing import Dict, Any, Optional

# Add the parent directory to sys.path to allow importing from projects
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..', '..')))

from crewai import Agent, Task, Crew, Process
from projects.utils import UseCase

class ScientificVisualizationUseCase(UseCase):
    """Scientific Visualization use case implementation."""
    
    def setup_agents(self):
        """Set up agents for scientific visualization."""
        self.data_interpreter = Agent(
            role="Scientific Data Interpreter",
            goal="Analyze scientific data to identify key patterns for visualization",
            backstory="You are an experienced scientific data analyst who specializes in interpreting "
                     "complex research data. You can identify meaningful patterns, relationships, and anomalies "
                     "that should be highlighted in visualizations. You understand the context and significance "
                     "of different types of scientific data across disciplines.",
            allow_delegation=False,
            llm=self.llm,
            tools=self.tools,
            verbose=True
        )
        
        self.visualization_designer = Agent(
            role="Scientific Visualization Designer",
            goal="Design effective visual representations of scientific data",
            backstory="You are a visualization expert who specializes in scientific communication. "
                     "You understand design principles, color theory, and perception psychology as they "
                     "apply to data visualization. You can select the most appropriate visualization types "
                     "for different data and research contexts, ensuring accuracy and clarity.",
            allow_delegation=False,
            llm=self.llm,
            tools=self.tools,
            verbose=True
        )
        
        self.publication_specialist = Agent(
            role="Scientific Publication Specialist",
            goal="Optimize visualizations for academic publication and presentation",
            backstory="You are an expert in scientific publishing standards with deep knowledge "
                      "of visualization requirements for different academic journals, conferences, "
                      "and publication formats. You understand how to prepare visualizations that "
                      "meet technical specifications while effectively communicating research findings.",
            allow_delegation=False,
            llm=self.llm,
            tools=self.tools,
            verbose=True
        )
        
        # Add agents to the list
        self.agents = [self.data_interpreter, self.visualization_designer, self.publication_specialist]
    
    def setup_tasks(self, input_data: Optional[Dict[str, Any]] = None):
        """Set up tasks for scientific visualization.
        
        Args:
            input_data: Optional dictionary containing input data
        """
        # Process input data if provided
        visualization_topic = input_data.get("query", "Visualization of climate change data for an academic paper") if input_data else "Visualization of climate change data for an academic paper"
        
        # Prepare dataset context if provided
        dataset_context = ""
        if input_data and "dataset" in input_data:
            dataset_context = f"Use the following dataset for visualization: {json.dumps(input_data['dataset'])}"
        
        # Define tasks
        data_interpretation_task = Task(
            description=f"Analyze the scientific data related to '{visualization_topic}'. {dataset_context}\n"
                       f"Identify key patterns, relationships, trends, and anomalies that should be highlighted "
                       f"in visualizations. Determine which aspects of the data are most scientifically significant "
                       f"and relevant to the research objectives. Recommend specific data features and relationships "
                       f"that should be visualized.",
            expected_output="A comprehensive data interpretation report with recommendations for visualization focus.",
            agent=self.data_interpreter,
        )
        
        visualization_design_task = Task(
            description=f"Design appropriate visualizations for '{visualization_topic}' based on the data interpretation. "
                       f"Select the most effective visualization types (e.g., graphs, charts, maps, 3D models) for the "
                       f"identified data patterns and research context. Specify design elements including layout, color schemes, "
                       f"labeling, annotations, and interactive features if applicable. Provide detailed specifications "
                       f"for each proposed visualization.",
            expected_output="Detailed visualization designs and specifications for the scientific data.",
            agent=self.visualization_designer,
            context=[data_interpretation_task]
        )
        
        publication_preparation_task = Task(
            description=f"Develop guidelines for preparing the visualizations of '{visualization_topic}' for academic publication. "
                      f"Specify technical requirements for the visualizations to meet publication standards, including "
                      f"resolution, file formats, size limits, color models, and accessibility considerations. "
                      f"Provide guidance on figure captions, legends, and integration with manuscript text. "
                      f"Include recommendations for both print and digital presentation formats.",
            expected_output="Comprehensive guidelines for preparing visualizations for academic publication.",
            agent=self.publication_specialist,
            context=[data_interpretation_task, visualization_design_task]
        )
        
        # Add tasks to the list
        self.tasks = [data_interpretation_task, visualization_design_task, publication_preparation_task]

# Create instance for standalone usage
scientific_visualization = ScientificVisualizationUseCase()

def run(input_data: Optional[Dict[str, Any]] = None) -> str:
    """Run the scientific visualization use case.
    
    Args:
        input_data: Optional dictionary containing input data
        
    Returns:
        The result of the scientific visualization process
    """
    # Create a new instance to ensure clean state
    use_case = ScientificVisualizationUseCase()
    use_case.setup_agents()
    use_case.setup_tasks(input_data)
    use_case.setup_crew(Process.sequential)
    
    # Run the use case
    result = use_case.crew.kickoff()
    return result

if __name__ == "__main__":
    result = run()
    print(result)
