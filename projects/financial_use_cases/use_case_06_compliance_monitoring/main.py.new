"""Compliance Monitoring example using CrewAI with Ollama."""

import sys
import os
import json
from typing import Dict, Any, Optional

# Add the parent directory to sys.path to allow importing from projects
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..', '..')))

from crewai import Agent, Task, Crew, Process
from projects.utils import UseCase

class ComplianceMonitoringUseCase(UseCase):
    """Compliance Monitoring use case implementation."""
    
    def setup_agents(self):
        """Set up agents for compliance monitoring."""
        self.regulatory_expert = Agent(
            role="Regulatory Compliance Expert",
            goal="Identify regulatory requirements and compliance obligations",
            backstory="You are a seasoned regulatory compliance specialist with expertise in banking, "
                     "securities, and financial services regulations. You stay current on regulations like "
                     "AML, KYC, GDPR, PSD2, MiFID II, and Basel III and can interpret them for practical application.",
            allow_delegation=False,
            llm=self.llm,
            tools=self.tools,
            verbose=True
        )
        
        self.transaction_monitor = Agent(
            role="Transaction Monitoring Analyst",
            goal="Detect suspicious or non-compliant transactions",
            backstory="You are an expert in financial transaction monitoring with a keen eye for "
                     "detecting unusual patterns and potential compliance violations. You can identify "
                     "red flags in transaction data that might indicate money laundering, fraud, or "
                     "other regulatory violations.",
            allow_delegation=False,
            llm=self.llm,
            tools=self.tools,
            verbose=True
        )
        
        self.compliance_officer = Agent(
            role="Chief Compliance Officer",
            goal="Assess compliance risks and develop mitigation strategies",
            backstory="You are a senior compliance officer responsible for overall compliance strategy "
                      "and risk management. You understand how to balance regulatory requirements with "
                      "business operations and can develop practical compliance solutions that protect "
                      "the organization while enabling business objectives.",
            allow_delegation=False,
            llm=self.llm,
            tools=self.tools,
            verbose=True
        )
        
        # Add agents to the list
        self.agents = [self.regulatory_expert, self.transaction_monitor, self.compliance_officer]
    
    def setup_tasks(self, input_data: Optional[Dict[str, Any]] = None):
        """Set up tasks for compliance monitoring.
        
        Args:
            input_data: Optional dictionary containing input data
        """
        # Process input data if provided
        compliance_focus = input_data.get("query", "Money laundering prevention in international transactions") if input_data else "Money laundering prevention in international transactions"
        
        # Prepare transaction data if provided
        transaction_context = ""
        if input_data and "transactions" in input_data:
            transaction_context = f"Review the following transaction data: {json.dumps(input_data['transactions'])}"
        
        # Define tasks
        regulatory_analysis_task = Task(
            description=f"Analyze the regulatory requirements related to '{compliance_focus}'. "
                       f"Identify all applicable regulations, reporting requirements, and compliance obligations. "
                       f"Explain key regulatory expectations, recent changes, and potential penalties for non-compliance. "
                       f"Provide a clear framework for regulatory compliance in this area.",
            expected_output="A comprehensive analysis of relevant regulations and compliance requirements.",
            agent=self.regulatory_expert,
        )
        
        transaction_monitoring_task = Task(
            description=f"Review transaction patterns to identify potential compliance issues related to '{compliance_focus}'. "
                       f"{transaction_context}\nIdentify suspicious patterns, red flags, or potential violations. "
                       f"Apply appropriate monitoring techniques and detection algorithms. Flag transactions "
                       f"that require further investigation and explain the specific compliance concerns.",
            expected_output="A detailed report of transaction monitoring results with identified suspicious activities.",
            agent=self.transaction_monitor,
            context=[regulatory_analysis_task]
        )
        
        risk_assessment_task = Task(
            description=f"Based on the regulatory analysis and transaction monitoring results, "
                      f"conduct a comprehensive compliance risk assessment for '{compliance_focus}'. "
                      f"Evaluate the severity and likelihood of identified risks. Develop a compliance strategy "
                      f"with specific recommendations for risk mitigation, control enhancements, and process improvements. "
                      f"Provide an implementation roadmap for strengthening compliance.",
            expected_output="A risk assessment report with prioritized recommendations for compliance improvement.",
            agent=self.compliance_officer,
            context=[regulatory_analysis_task, transaction_monitoring_task]
        )
        
        # Add tasks to the list
        self.tasks = [regulatory_analysis_task, transaction_monitoring_task, risk_assessment_task]

# Create instance for standalone usage
compliance_monitoring = ComplianceMonitoringUseCase()

def run(input_data: Optional[Dict[str, Any]] = None) -> str:
    """Run the compliance monitoring use case.
    
    Args:
        input_data: Optional dictionary containing input data
        
    Returns:
        The result of the compliance monitoring process
    """
    # Create a new instance to ensure clean state
    use_case = ComplianceMonitoringUseCase()
    use_case.setup_agents()
    use_case.setup_tasks(input_data)
    use_case.setup_crew(Process.sequential)
    
    # Run the use case
    result = use_case.crew.kickoff()
    return result

if __name__ == "__main__":
    result = run()
    print(result)
