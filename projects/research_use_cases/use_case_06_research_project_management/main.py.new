"""Research Project Management example using CrewAI with Ollama."""

import sys
import os
import json
from typing import Dict, Any, Optional

# Add the parent directory to sys.path to allow importing from projects
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..', '..')))

from crewai import Agent, Task, Crew, Process
from projects.utils import UseCase

class ResearchProjectManagementUseCase(UseCase):
    """Research Project Management use case implementation."""
    
    def setup_agents(self):
        """Set up agents for research project management."""
        self.project_planner = Agent(
            role="Research Project Planner",
            goal="Develop comprehensive research project plans",
            backstory="You are an experienced research project planner who excels at breaking down "
                     "complex research initiatives into well-structured plans. You have expertise in "
                     "defining project scope, setting realistic timelines, identifying milestones, "
                     "and anticipating resource needs for research projects.",
            allow_delegation=False,
            llm=self.llm,
            tools=self.tools,
            verbose=True
        )
        
        self.resource_manager = Agent(
            role="Research Resource Manager",
            goal="Optimize allocation of research resources",
            backstory="You are a skilled research administrator with expertise in managing resources "
                     "for complex projects. You understand how to allocate budgets, personnel, equipment, "
                     "and time effectively to ensure research objectives are met within constraints. "
                     "You excel at identifying resource bottlenecks and finding solutions.",
            allow_delegation=False,
            llm=self.llm,
            tools=self.tools,
            verbose=True
        )
        
        self.progress_tracker = Agent(
            role="Research Progress Monitor",
            goal="Track research progress and ensure goal alignment",
            backstory="You are a detail-oriented research progress tracker with experience monitoring "
                      "complex scientific projects. You know how to establish key performance indicators, "
                      "track milestones, identify delays early, and suggest corrective actions to keep "
                      "projects on track toward their research objectives.",
            allow_delegation=False,
            llm=self.llm,
            tools=self.tools,
            verbose=True
        )
        
        # Add agents to the list
        self.agents = [self.project_planner, self.resource_manager, self.progress_tracker]
    
    def setup_tasks(self, input_data: Optional[Dict[str, Any]] = None):
        """Set up tasks for research project management.
        
        Args:
            input_data: Optional dictionary containing input data
        """
        # Process input data if provided
        project_title = input_data.get("title", "Analysis of Climate Change Impact on Biodiversity") if input_data else "Analysis of Climate Change Impact on Biodiversity"
        
        # Prepare project context if provided
        project_context = ""
        if input_data and "project_details" in input_data:
            project_context = f"Use the following project details: {json.dumps(input_data['project_details'])}"
        
        # Define tasks
        project_planning_task = Task(
            description=f"Develop a comprehensive research project plan for '{project_title}'. {project_context}\n"
                       f"Create a detailed project structure including research questions, objectives, methodology, "
                       f"timeline, and major milestones. Break down the project into logical phases with specific "
                       f"tasks and deliverables for each phase. Identify dependencies between tasks and critical path items.",
            expected_output="A comprehensive research project plan with phases, tasks, timeline, and milestones.",
            agent=self.project_planner,
        )
        
        resource_allocation_task = Task(
            description=f"Develop a resource allocation plan for the research project '{project_title}'. "
                       f"Based on the project plan, identify required resources including personnel (researchers, assistants, "
                       f"specialists), equipment, materials, datasets, and budget. Create a detailed allocation plan "
                       f"that optimizes these resources across project phases and activities. Identify potential "
                       f"resource constraints or bottlenecks and suggest mitigation strategies.",
            expected_output="A detailed resource allocation plan with budget estimates and staffing requirements.",
            agent=self.resource_manager,
            context=[project_planning_task]
        )
        
        progress_monitoring_task = Task(
            description=f"Design a progress monitoring framework for the research project '{project_title}'. "
                      f"Based on the project plan and resource allocation, develop key performance indicators, "
                      f"progress metrics, and monitoring procedures. Create a framework for regular progress reviews, "
                      f"milestone verification, and early detection of issues. Include risk management approaches "
                      f"and contingency planning for potential research challenges.",
            expected_output="A comprehensive progress monitoring framework with KPIs, reporting templates, and risk mitigation plans.",
            agent=self.progress_tracker,
            context=[project_planning_task, resource_allocation_task]
        )
        
        # Add tasks to the list
        self.tasks = [project_planning_task, resource_allocation_task, progress_monitoring_task]

# Create instance for standalone usage
research_project_management = ResearchProjectManagementUseCase()

def run(input_data: Optional[Dict[str, Any]] = None) -> str:
    """Run the research project management use case.
    
    Args:
        input_data: Optional dictionary containing input data
        
    Returns:
        The result of the research project management process
    """
    # Create a new instance to ensure clean state
    use_case = ResearchProjectManagementUseCase()
    use_case.setup_agents()
    use_case.setup_tasks(input_data)
    use_case.setup_crew(Process.sequential)
    
    # Run the use case
    result = use_case.crew.kickoff()
    return result

if __name__ == "__main__":
    result = run()
    print(result)
