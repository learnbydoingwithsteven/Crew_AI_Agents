"""Automated Financial Reporting example using CrewAI with Ollama."""

import sys
import os
import json
from typing import Dict, Any, Optional

# Add the parent directory to sys.path to allow importing from projects
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..', '..')))

from crewai import Agent, Task, Crew, Process
from projects.utils import UseCase

class FinancialReportingUseCase(UseCase):
    """Financial Reporting use case implementation."""
    
    def setup_agents(self):
        """Set up agents for financial reporting."""
        self.data_analyst = Agent(
            role="Financial Data Analyst",
            goal="Gather and analyze financial data accurately",
            backstory="You are a meticulous financial data analyst with expertise in extracting, cleaning, "
                    "and analyzing financial data from various sources. You have a keen eye for patterns "
                    "and anomalies in financial metrics.",
            allow_delegation=False,
            llm=self.llm,
            tools=self.tools,
            verbose=True
        )
        
        self.report_generator = Agent(
            role="Financial Report Generator",
            goal="Create comprehensive and insightful financial reports",
            backstory="You are a skilled financial report writer who can transform raw financial data "
                    "into clear, informative reports. You understand regulatory requirements and can "
                    "present complex financial information in an accessible way.",
            allow_delegation=False,
            llm=self.llm,
            tools=self.tools,
            verbose=True
        )
        
        self.compliance_officer = Agent(
            role="Financial Compliance Officer",
            goal="Ensure all financial reporting meets regulatory standards",
            backstory="You are a financial compliance expert with deep knowledge of financial regulations "
                    "like GAAP, IFRS, and SEC requirements. You ensure all financial reporting is accurate, "
                    "complete, and adheres to applicable regulations.",
            allow_delegation=False,
            llm=self.llm,
            tools=self.tools,
            verbose=True
        )
        
        # Add agents to the list
        self.agents = [self.data_analyst, self.report_generator, self.compliance_officer]
    
    def setup_tasks(self, input_data: Optional[Dict[str, Any]] = None):
        """Set up tasks for financial reporting.
        
        Args:
            input_data: Optional dictionary containing input data
        """
        # Process input data if provided
        report_period = input_data.get("query", "Q1 2025") if input_data else "Q1 2025"
        
        # Prepare financial data if provided
        financial_context = ""
        if input_data and "financial_data" in input_data:
            financial_context = f"Use this financial data for analysis: {json.dumps(input_data['financial_data'])}"
        
        # Define tasks
        data_analysis_task = Task(
            description=f"Analyze the financial data for {report_period}. {financial_context}\n"
                       f"Calculate key financial metrics including revenue growth, profit margins, "
                       f"cash flow, assets, liabilities, and key ratios. Identify any significant "
                       f"trends, anomalies, or areas of concern.",
            expected_output="A comprehensive analysis of financial data with key metrics, trends, and issues identified.",
            agent=self.data_analyst,
        )
        
        report_generation_task = Task(
            description=f"Generate a detailed financial report for {report_period} based on the financial analysis. "
                       f"Include sections for executive summary, income statement, balance sheet, cash flow statement, "
                       f"key financial ratios, and explanatory notes for significant changes or anomalies.",
            expected_output="A complete financial report with all required sections and clear explanations of financial performance.",
            agent=self.report_generator,
            context=[data_analysis_task]
        )
        
        compliance_check_task = Task(
            description=f"Review the financial report for {report_period} to ensure compliance with applicable regulations. "
                       f"Verify that all required disclosures are included, financial calculations are accurate, "
                       f"and the report follows proper accounting standards. Flag any compliance issues.",
            expected_output="A compliance review report highlighting any issues or confirming the report meets all regulatory requirements.",
            agent=self.compliance_officer,
            context=[report_generation_task]
        )
        
        # Add tasks to the list
        self.tasks = [data_analysis_task, report_generation_task, compliance_check_task]

# Create instance for standalone usage
financial_reporting = FinancialReportingUseCase()

def run(input_data: Optional[Dict[str, Any]] = None) -> str:
    """Run the financial reporting use case.
    
    Args:
        input_data: Optional dictionary containing input data
        
    Returns:
        The result of the financial reporting process
    """
    # Create a new instance to ensure clean state
    use_case = FinancialReportingUseCase()
    use_case.setup_agents()
    use_case.setup_tasks(input_data)
    use_case.setup_crew(Process.sequential)
    
    # Run the use case
    result = use_case.crew.kickoff()
    return result

if __name__ == "__main__":
    result = run()
    print(result)
