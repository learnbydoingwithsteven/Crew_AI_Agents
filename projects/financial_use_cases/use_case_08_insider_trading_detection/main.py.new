"""Insider Trading Detection example using CrewAI with Ollama."""

import sys
import os
import json
from typing import Dict, Any, Optional

# Add the parent directory to sys.path to allow importing from projects
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..', '..')))

from crewai import Agent, Task, Crew, Process
from projects.utils import UseCase

class InsiderTradingDetectionUseCase(UseCase):
    """Insider Trading Detection use case implementation."""
    
    def setup_agents(self):
        """Set up agents for insider trading detection."""
        self.market_analyst = Agent(
            role="Market Activity Analyst",
            goal="Identify unusual market activities and trading patterns",
            backstory="You are a market analysis expert specialized in detecting anomalous trading patterns. "
                     "You can identify unusual trading volumes, price movements, and market behaviors that "
                     "deviate from normal patterns. You understand market microstructure and can spot "
                     "activities that may indicate potential insider trading.",
            allow_delegation=False,
            llm=self.llm,
            tools=self.tools,
            verbose=True
        )
        
        self.corporate_events_analyst = Agent(
            role="Corporate Events Intelligence Analyst",
            goal="Monitor and analyze corporate events for potential insider trading signals",
            backstory="You are a corporate intelligence specialist who tracks significant company events "
                     "such as mergers, acquisitions, earnings announcements, management changes, and regulatory "
                     "filings. You can identify suspicious timing between corporate events and unusual trading "
                     "activities that might indicate information leakage or insider trading.",
            allow_delegation=False,
            llm=self.llm,
            tools=self.tools,
            verbose=True
        )
        
        self.regulatory_specialist = Agent(
            role="Financial Regulatory Specialist",
            goal="Evaluate potential insider trading cases against regulatory frameworks",
            backstory="You are a financial regulatory expert with deep knowledge of securities laws, "
                      "particularly those related to insider trading. You understand the legal definitions, "
                      "evidentiary standards, and enforcement approaches for insider trading cases. "
                      "You can assess whether observed trading patterns likely constitute violations.",
            allow_delegation=False,
            llm=self.llm,
            tools=self.tools,
            verbose=True
        )
        
        # Add agents to the list
        self.agents = [self.market_analyst, self.corporate_events_analyst, self.regulatory_specialist]
    
    def setup_tasks(self, input_data: Optional[Dict[str, Any]] = None):
        """Set up tasks for insider trading detection.
        
        Args:
            input_data: Optional dictionary containing input data
        """
        # Process input data if provided
        company_focus = input_data.get("query", "Analyze recent trading activity for TechCorp before their merger announcement") if input_data else "Analyze recent trading activity for TechCorp before their merger announcement"
        
        # Prepare trading data context if provided
        trading_context = ""
        if input_data and "trading_data" in input_data:
            trading_context = f"Use the following trading data for analysis: {json.dumps(input_data['trading_data'])}"
        
        # Define tasks
        trading_pattern_analysis_task = Task(
            description=f"Analyze trading patterns related to '{company_focus}'. {trading_context}\n"
                       f"Identify any unusual trading volumes, price movements, options activity, or other "
                       f"market behaviors that deviate from historical patterns or peer comparisons. "
                       f"Calculate relevant metrics such as abnormal returns, trading volumes compared to "
                       f"averages, and timing of trades. Flag specific suspicious trading activities.",
            expected_output="A detailed analysis of trading patterns with identified anomalies and suspicious activities.",
            agent=self.market_analyst,
        )
        
        corporate_events_analysis_task = Task(
            description=f"Investigate corporate events and news related to '{company_focus}'. "
                       f"Research and document significant events such as earnings announcements, mergers, "
                       f"acquisitions, executive changes, regulatory filings, and major business developments. "
                       f"Create a timeline correlating these events with the identified unusual trading activities. "
                       f"Identify potential information leakage points or trading windows of concern.",
            expected_output="A comprehensive timeline of corporate events correlated with unusual trading activities.",
            agent=self.corporate_events_analyst,
            context=[trading_pattern_analysis_task]
        )
        
        regulatory_assessment_task = Task(
            description=f"Evaluate potential insider trading concerns for '{company_focus}' based on the trading "
                      f"pattern analysis and corporate events timeline. Assess whether the evidence suggests "
                      f"potential violations of insider trading regulations. Consider factors such as materiality "
                      f"of information, timing of trades, traders' relationships to the company, magnitude of trading, "
                      f"and potential legitimate explanations. Recommend appropriate next steps for investigation.",
            expected_output="A regulatory assessment of potential insider trading violations with recommendations for investigation.",
            agent=self.regulatory_specialist,
            context=[trading_pattern_analysis_task, corporate_events_analysis_task]
        )
        
        # Add tasks to the list
        self.tasks = [trading_pattern_analysis_task, corporate_events_analysis_task, regulatory_assessment_task]

# Create instance for standalone usage
insider_trading_detection = InsiderTradingDetectionUseCase()

def run(input_data: Optional[Dict[str, Any]] = None) -> str:
    """Run the insider trading detection use case.
    
    Args:
        input_data: Optional dictionary containing input data
        
    Returns:
        The result of the insider trading detection process
    """
    # Create a new instance to ensure clean state
    use_case = InsiderTradingDetectionUseCase()
    use_case.setup_agents()
    use_case.setup_tasks(input_data)
    use_case.setup_crew(Process.sequential)
    
    # Run the use case
    result = use_case.crew.kickoff()
    return result

if __name__ == "__main__":
    result = run()
    print(result)
